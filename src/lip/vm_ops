BEGIN_OP(NOP)
END_OP(NOP)

BEGIN_OP(POP)
	++sp;
END_OP(POP)

BEGIN_OP(LDK)
	lip_value_t constant = fn.constants[operand];
	switch(constant.type)
	{
		case LIP_VAL_NUMBER:
			*(--sp) = constant;
			break;
		case LIP_VAL_STRING:
		case LIP_VAL_SYMBOL:
			*(--sp) = (lip_value_t) {
				.type = constant.type,
				.data = {
					.reference = lip_function_resource(
						fp->closure->function.lip,
						constant.data.index
					)
				}
			};
			break;
		default:
			THROW("Illegal instruction");
	}
END_OP(LDK)

BEGIN_OP(LARG)
	*(--sp) = bp[operand];
END_OP(LARG)

BEGIN_OP(LDLV)
	*(--sp) = ep[operand];
END_OP(LDLV)

BEGIN_OP(LDCV)
	*(--sp) = fp->closure->environment[operand];
END_OP(LDCV)

BEGIN_OP(IMP)
	lip_value_t result;
	lip_string_t* symbol_name = lip_function_resource(
		fp->closure->function.lip, fn.imports[operand].name
	);

	SAVE_CONTEXT();
	bool resolved = vm->rt->resolve_import(vm->rt, symbol_name, &result);
	if(LIP_UNLIKELY(!resolved)) {
		THROW_FMT(
			"Undefined symbol: %.*s", (int)symbol_name->length, symbol_name->ptr
		);
	}
	LOAD_CONTEXT();

	if(result.type == LIP_VAL_FUNCTION)
	{
		lip_closure_t* closure = result.data.reference;
		closure->debug_name = symbol_name;
	}

	*(--sp) = result;
END_OP(IMP)

BEGIN_OP(IMPS)
	lip_value_t val = fn.imports[operand].value;
	*(--sp) = val;
END_OP(IMPS)

BEGIN_OP(LDI)
	lip_value_t* value = --sp;
	value->type = LIP_VAL_NUMBER;
	value->data.number = operand;
END_OP(LDI)

BEGIN_OP(LDB)
	lip_value_t* value = --sp;
	value->type = LIP_VAL_BOOLEAN;
	value->data.boolean = operand;
END_OP(LDB)

BEGIN_OP(PLHR)
	lip_value_t* value = ep + operand;
	value->type = LIP_VAL_PLACEHOLDER;
	value->data.index = operand;
END_OP(PLHR)

BEGIN_OP(NIL)
	(--sp)->type = LIP_VAL_NIL;
END_OP(NIL)

BEGIN_OP(JMP)
	pc = fn.instructions + operand;
END_OP(JMP)

BEGIN_OP(JOF)
	lip_value_t* top = (sp++);
	bool is_false =
		(top->type == LIP_VAL_NIL)
		|| (top->type == LIP_VAL_BOOLEAN && !top->data.boolean);
	lip_instruction_t* false_target = fn.instructions + operand;
	pc = is_false ? false_target : pc;
END_OP(JOF)

BEGIN_OP(CALL)
	lip_value_t* next_fn = sp++;
	SAVE_CONTEXT();
	++vm->fp;
	vm->fp->ep = ep;
	lip_exec_status_t status = lip_vm_do_call(vm, next_fn, operand);
	if(status != LIP_EXEC_OK) { return status; }
	LOAD_CONTEXT();
END_OP(CALL)

BEGIN_OP(TAIL)
	lip_value_t* next_fn = sp++;
	lip_value_t* next_sp = bp + fp->num_args - operand;
	memmove(next_sp, sp, sizeof(lip_value_t) * operand);
	sp = next_sp;
	SAVE_CONTEXT();
	vm->fp->ep = (vm->fp - 1)->ep;
	lip_exec_status_t status = lip_vm_do_call(vm, next_fn, operand);
	if(status != LIP_EXEC_OK) { return status; }
	if(lip_stack_frame_is_native(vm->fp)) { return LIP_EXEC_OK; }
	LOAD_CONTEXT();
END_OP(TAIL)

BEGIN_OP(RET)
	lip_value_t* next_sp = bp + fp->num_args - 1;
	*next_sp = *sp;
	sp = next_sp;
	SAVE_CONTEXT();
	--vm->fp;
	if(lip_stack_frame_is_native(vm->fp)) { return LIP_EXEC_OK; }
	LOAD_CONTEXT();
END_OP(RET)

BEGIN_OP(CLS)
	unsigned int function_index = operand & 0xFFF;
	unsigned int num_captures = (operand >> 12) & 0xFFF;
	size_t closure_size =
		sizeof(lip_closure_t) + sizeof(lip_value_t) * num_captures;
	lip_closure_t* closure = vm->rt->malloc(
		vm->rt, LIP_VAL_FUNCTION, closure_size
	);
	*closure = (lip_closure_t){
		.is_native = false,
		.function = {
			.lip = lip_function_resource(
				fp->closure->function.lip, fn.function_offsets[function_index]
			)
		},
		.env_len = num_captures
	};
	for(unsigned int i = 0; i < num_captures; ++i)
	{
		lip_opcode_t opcode;
		int32_t var_index;
		lip_disasm(pc[i], &opcode, &var_index);
		lip_value_t* base;
		switch(opcode)
		{
			case LIP_OP_LARG:
				base = bp;
				break;
			case LIP_OP_LDLV:
				base = ep;
				break;
			case LIP_OP_LDCV:
				base = fp->closure->environment;
				break;
			default:
				THROW("Illegal instruction");
		}
		closure->environment[i] = base[var_index];
	}
	pc += num_captures;
	lip_value_t value = {
		.type = LIP_VAL_FUNCTION,
		.data = { .reference = closure }
	};
	*(--sp) = value;
END_OP(CLS)

BEGIN_OP(RCLS)
	lip_value_t* target = ep + operand;
	if(target->type == LIP_VAL_FUNCTION)
	{
		lip_closure_t* closure = target->data.reference;
		for(unsigned int i = 0; i < closure->env_len; ++i)
		{
			lip_value_t* captured_val = &closure->environment[i];
			if(captured_val->type == LIP_VAL_PLACEHOLDER)
			{
				*captured_val = *(ep + captured_val->data.index);
			}
		}
	}
	else if(target->type == LIP_VAL_PLACEHOLDER)
	{
		*target = *(ep + target->data.index);
	}
END_OP(RCLS)

BEGIN_OP(SET)
	ep[operand] = *(sp++);
END_OP(SET)

LIP_PRIM_OP(DO_PRIM_OP)
